app:
  title: Scaffolded Backstage App
  baseUrl: http://localhost:3000

organization:
  name: My Company

backend:
  # Used for enabling authentication, secret is shared by all backend plugins
  # See https://backstage.io/docs/auth/service-to-service-auth for
  # information on the format
  # auth:
  #   keys:
  #     - secret: ${BACKEND_SECRET}
  baseUrl: http://localhost:7007
  listen:
    port: 7007
    # Uncomment the following host directive to bind to specific interfaces
    # host: 127.0.0.1
  csp:
    connect-src: ["'self'", 'http:', 'https:']
    # Content-Security-Policy directives follow the Helmet format: https://helmetjs.github.io/#reference
    # Default Helmet Content-Security-Policy values can be removed by setting the key to false
  cors:
    origin: http://localhost:3000
    methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
    credentials: true
  # This is for local development only, it is not recommended to use this in production
  # The production database configuration is stored in app-config.production.yaml
  database:
    client: better-sqlite3
    connection: ':memory:'
  # workingDirectory: /tmp # Use this to configure a working directory for the scaffolder, defaults to the OS temp-dir

integrations:
  github:
    - host: github.com
      # This is a Personal Access Token or PAT from GitHub. You can find out how to generate this token, and more information
      # about setting up the GitHub integration here: https://backstage.io/docs/getting-started/configuration#setting-up-a-github-integration
      token: ${GITHUB_TOKEN}
    ### Example for how to add your GitHub Enterprise instance using the API:
    # - host: ghe.example.net
    #   apiBaseUrl: https://ghe.example.net/api/v3
    #   token: ${GHE_TOKEN}

proxy:
### Example for how to add a proxy endpoint for the frontend.
### A typical reason to do this is to handle HTTPS and CORS for internal services.
# endpoints:
#   '/test':
#     target: 'https://example.com'
#     changeOrigin: true

# Reference documentation http://backstage.io/docs/features/techdocs/configuration
# Note: After experimenting with basic setup, use CI/CD to generate docs
# and an external cloud storage when deploying TechDocs for production use-case.
# https://backstage.io/docs/features/techdocs/how-to-guides#how-to-migrate-from-techdocs-basic-to-recommended-deployment-approach
techdocs:
  builder: 'local' # Alternatives - 'external'
  generator:
    runIn: 'docker' # Alternatives - 'local'
  publisher:
    type: 'local' # Alternatives - 'googleGcs' or 'awsS3'. Read documentation for using alternatives.

auth:
  # see https://backstage.io/docs/auth/ to learn about auth providers
  providers:
    guest:
      userEntityRef: user:default/guest

scaffolder:
# see https://backstage.io/docs/features/software-templates/configuration for software template options

catalog:
  import:
    entityFilename: catalog-info.yaml
    pullRequestBranchName: backstage-integration
  rules:
    - allow: [Component, System, API, Resource, Location]
  locations:
    # Local example data, file locations are relative to the backend process, typically `packages/backend`
    - type: file
      target: ../../examples/entities.yaml

    # Local example template
    - type: file
      target: ../../examples/template/template.yaml
      rules:
        - allow: [Template]

    # Local example organizational data
    - type: file
      target: ../../examples/org.yaml
      rules:
        - allow: [User, Group]

    ## Uncomment these lines to add more example data
    # - type: url
    #   target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/all.yaml

    ## Uncomment these lines to add an example org
    # - type: url
    #   target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/acme-corp.yaml
    #   rules:
    #     - allow: [User, Group]

costInsights:
  engineerCost: 200000

genai:
  agents:
    general: # This matches the URL in the frontend
      description: Docs chat assistant
      prompt: >
        You are an expert in platform engineering and answer questions in a succinct and easy to understand manner.

        Your main goal is to help users find the right documentation in Backstage TechDocs by searching the TechDocs for relevant information.
        The documentation in TechDocs is written in english, so you should search for information in english and provide the answer in the users language. 
        When mentioning a Backstage documentation by name in your response always format the link to the techdocs as a Markdown link of the format:

        [entity name documentation](/docs/<namespace>/<kind>/<entity name>)

        For example:

        [genc-knowledge-hub](/docs/default/Component/genc-knowledge-hub)

        When providing an answer always search the TechDocs for a recommendation. Only rely on your own knowledge when nothing is found.
        Answers should always be well-structured and use well-formed Markdown.

        The current user is {username} and you can provide that information if asked.
      langgraph:
        messagesMaxTokens: 150000 # Set based on context of chosen model, prune message history based on number of tokens
        # Use appropriate snippet for your model provider
        openai:
          apiKey: ${OPENAI_API_KEY}
          modelName: 'gpt-4o-mini'
          # baseUrl: ${OPENAI_API_BASE_URL} # Replace with eu endpoint when available
      tools:
        - backstageEntity
        - backstageTechDocsSearch

    docs-assistant: # NEW: Documentation assistant for TechDocs pages
      description: Documentation assistant for TechDocs
      prompt: >
        You are a helpful documentation assistant that specializes in answering questions about technical documentation.

        You have access to the current document context and can search specifically within the documentation being viewed.

        Always provide clear, concise answers and reference specific sections of the documentation when possible.

        When the user asks questions, use the backstageCurrentDocumentSearch tool first to find relevant information within the current document context.

        If the current document doesn't contain enough information, you can broaden your search using backstageTechDocsSearch.

        Structure your answers clearly with:
        - A direct answer to the question
        - Relevant quotes or references from the documentation
        - Additional context if helpful

        The current user is {username}.
      langgraph:
        messagesMaxTokens: 100000
        openai:
          apiKey: ${OPENAI_API_KEY}
          modelName: 'gpt-4o-mini'
      tools:
        - backstageCurrentDocumentSearch
        - backstageTechDocsSearch
        - backstageEntity
